package internal

import (
	"errors"

	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager/types"
	"github.com/natemarks/postgr8/command"
	"github.com/natemarks/postgr8/credentials"
)

// GetTestConnParams return connection params generated by the cdk code in
// deployments/
func GetTestConnParams() (connParams command.InstanceConnectionParams, err error) {

	// set secret list filter using the tags set in deployments/app.py
	testSecretInput := &secretsmanager.ListSecretsInput{
		Filters: []types.Filter{
			{
				Key:    "tag-key",
				Values: []string{"purpose"},
			},
			{
				Key:    "tag-value",
				Values: []string{"postgr8_test_fixture"},
			},
		},
	}
	// Get a list of secrets that match the filter
	listOutput, err := credentials.ListSecrets(testSecretInput)
	if err != nil {
		return connParams, err
	}
	// Make sure there is exactly one match
	if len(listOutput) == 0 {
		return connParams, errors.New(
			"no matching secrets. Check AWS credentials or deploy test fixture CDK")
	}
	if len(listOutput) > 1 {
		return connParams, errors.New(
			"too many matching secrets. Clean up extras")
	}
	// Get the secret name from the matching secret and use it to get the
	// credentials
	secretID := *listOutput[0].Name
	connParams, err = credentials.GetCredentialsFromSecretID(secretID)
	return connParams, err
}

// StringInSlice return true is the string is in the slice
func StringInSlice(mySlice []string, myTarget string) bool {
	for _, s := range mySlice {
		if s == myTarget {
			return true
		}
	}
	return false
}
